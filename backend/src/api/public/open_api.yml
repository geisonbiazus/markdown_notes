openapi: '3.0.3'
info:
  version: '1.0.0'
  title: 'MarkdownNotes API'
  contact:
    name: 'Geison Biazus'
    email: 'geisonbiazus@gmail.com'

servers:
  - url: http://localhost:4000
    description: Local server
  - url: https://api.notes.geisonbiazus.com
    description: Production server

components:
  schemas:
    User:
      type: object
      properties:
        email:
          type: string
          format: email
        status:
          type: string
          enum: [pending, active]
    Note:
      type: object
      properties:
        id:
          type: string
          format: uuid
        title:
          type: string
        body:
          type: string
          description: Body in markdown format
        html:
          type: string
          description: Body rended in HTML
      example: 
        id: '3fa85f64-5717-4562-b3fc-2c963f66afa6'
        title': 'Note Title'
        body': '# Note body in markdown'
        html': '<h1>Note body in markdown</h1>'
    Error:
      properties:
        type:
          type: string
    ValidationError:
      type: object
      properties:
        field:
          type: string
        type:
          type: string

  responses:
    note:
     description: 'Note'
     content:
      'application/json':
        schema:
          $ref: '#/components/schemas/Note'
    unauthorized:
      description: Unauthorized
      content:
        'application/json':
          schema:
            $ref: '#/components/schemas/Error'
          examples:
            unauthorized:
              $ref: '#/components/examples/UnauthorizedError'
    validation_error:
      description: Invalid input
      content:
        'application/json':
          schema:
            type: array
            items:
              $ref: '#/components/schemas/ValidationError'
    not_found:
      description: 'Not found'
      content:
        'application/json':
          schema:
            $ref: '#/components/schemas/Error'
          examples:
            not_found:
              $ref: '#/components/examples/NotFoundError'

  examples:
    NotFoundError:
      value: { 'type': 'not_found' }
    UnauthorizedError:
      value: { 'type': 'unauthorized' }

  securitySchemes:
    bearerAuth:
      type: 'http'
      scheme: 'bearer'
      bearerFormat: 'JWT'

paths:
  '/sign_in':
    post:
      tags:
        - Authentication
      description: 'Authenticates an user in order to use the application.'
      requestBody:
        content:
          'application/json':
            schema:
              properties:
                email:
                  type: string
                  format: email
                password:
                  type  : string
              required:
                - email
                - password
            example: { 'email': 'user@example.com', 'password': 'password123' }

      responses:
        200:
          description: 'Authentication successful.'
          content:
            'application/json':
              schema:
                properties:
                  token:
                    type: string
                    description: 'Token to be used in subsequent requests'
        404:
          $ref:  "#/components/responses/not_found"

  '/register':
    post:
      tags:
        - Authentication
      description: Registers a new user
      requestBody:
        content:
          'application/json':
            schema:
              properties:
                email:
                  type: string
                  format: 'email'
                password:
                  type: string
                  minLength: 8
            example: { 'email': 'user@example.com', 'password': 'password123' }
      responses:
        201:
          description: 'User registered.'
          content:
            'application/json':
              schema:
                $ref: "#/components/schemas/User"
        422:
          $ref:  "#/components/responses/validation_error"
        409:
          description: 'Email already in use'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                conflict:
                  value: { 'type': 'email_not_available' }


  '/notes':
    get:
      tags:
        - Notes
      description: 'Returns all notes from the authenticated user'
      security:
        - bearerAuth: []
      responses:
        200:
          description: 'A list of notes.'
          content:
            'application/json':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Note'
        401:
          $ref:  "#/components/responses/unauthorized"
  '/notes/{id}':
    put:
      tags:
        - Notes
      description: 'Create or update a note based on the given ID'
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        content:
          'application/json':
            schema:
              properties:
                title:
                  type: string
                body:
                  type: string
              required:
                - title
            example: 
              title: 'Note Title'
              body: '# Note body in markdown'
      security:
        - bearerAuth: []
      responses:
        200:
          $ref:  "#/components/responses/note"
        422:
          $ref:  "#/components/responses/validation_error"
        401:
          $ref:  "#/components/responses/unauthorized"

    get:
      tags:
        - Notes
      description: Returns a note by id
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      security:
        - bearerAuth: []
      responses:
        200:
          $ref:  "#/components/responses/note"
        404:
          $ref:  "#/components/responses/not_found"
        401:
          $ref:  "#/components/responses/unauthorized"

    delete:
      tags:
        - Notes
      description: Removes a note by id
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      security:
        - bearerAuth: []
      responses:
        200:
          description: Note sucessfully removed
          content:
            application/json: {}
        404:
          $ref:  "#/components/responses/not_found"
        401:
          $ref:  "#/components/responses/unauthorized"

              